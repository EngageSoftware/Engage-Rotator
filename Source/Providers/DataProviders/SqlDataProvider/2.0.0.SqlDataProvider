IF EXISTS (select * from syscolumns where [name] = 'TabModuleId' and id = OBJECT_ID(N'{databaseOwner}{objectQualifier}EngageRotator_ContentItem'))
BEGIN
	-- Using EXEC so that the script will run without errors after the column has been renamed
	EXEC('DELETE {databaseOwner}{objectQualifier}EngageRotator_ContentItem
	FROM {databaseOwner}{objectQualifier}EngageRotator_ContentItem ci
	FULL OUTER JOIN {databaseOwner}{objectQualifier}TabModules tm ON (ci.TabModuleId = tm.TabModuleID)
	WHERE tm.ModuleID IS NULL

	UPDATE {databaseOwner}{objectQualifier}EngageRotator_ContentItem
	SET TabModuleId = (SELECT ModuleId FROM {databaseOwner}{objectQualifier}TabModules tm WHERE tm.TabModuleId = ci.TabModuleId)
	FROM {databaseOwner}{objectQualifier}EngageRotator_ContentItem ci')
	
	EXECUTE sp_rename N'{databaseOwner}{objectQualifier}EngageRotator_ContentItem.TabModuleId', N'ModuleId', 'COLUMN' 
END
GO

IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}{objectQualifier}EngageRotator_ContentItem'))
BEGIN
	BEGIN TRAN
	
	ALTER TABLE {databaseOwner}{objectQualifier}EngageRotator_ContentItem
		DROP CONSTRAINT DF_{objectQualifier}EngageRotator_ContentItem_SortOrder

	-- Rename table & columns, change Content from text to ntext
	CREATE TABLE {databaseOwner}{objectQualifier}EngageRotator_Slide
		(
		SlideId int NOT NULL IDENTITY (1, 1),
		[Content] ntext NULL,
		LinkUrl nvarchar(255) NULL,
		ImageUrl nvarchar(255) NULL,
		StartDate datetime NOT NULL,
		EndDate datetime NULL,
		ModuleId int NOT NULL,
		PagerImageUrl nvarchar(255) NULL,
		Title nvarchar(255) NULL,
		SortOrder int NOT NULL
		)

	ALTER TABLE {databaseOwner}{objectQualifier}EngageRotator_Slide ADD CONSTRAINT
		DF_{objectQualifier}EngageRotator_Slide_SortOrder DEFAULT ((5)) FOR SortOrder

	SET IDENTITY_INSERT {databaseOwner}{objectQualifier}EngageRotator_Slide ON

	IF EXISTS(SELECT * FROM {databaseOwner}{objectQualifier}EngageRotator_ContentItem)
		 EXEC('INSERT INTO {databaseOwner}{objectQualifier}EngageRotator_Slide (SlideId, [Content], LinkUrl, ImageUrl, StartDate, EndDate, ModuleId, PagerImageUrl, Title, SortOrder)
			SELECT ContentItemId, CONVERT(ntext, Description), LinkUrl, ThumbnailUrl, StartDate, EndDate, ModuleId, PositionThumbnailUrl, Title, SortOrder FROM {databaseOwner}{objectQualifier}EngageRotator_ContentItem')

	SET IDENTITY_INSERT {databaseOwner}{objectQualifier}EngageRotator_Slide OFF

	DROP TABLE {databaseOwner}{objectQualifier}EngageRotator_ContentItem

	ALTER TABLE {databaseOwner}{objectQualifier}EngageRotator_Slide ADD CONSTRAINT
		{objectQualifier}PK_EngageRotator_Slide PRIMARY KEY CLUSTERED 
		(
		SlideId
		)
		
	COMMIT TRAN
END
GO

IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}{objectQualifier}EngageRotator_spInsertContentItem'))
DROP PROCEDURE {databaseOwner}{objectQualifier}EngageRotator_spInsertContentItem
GO

IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}{objectQualifier}EngageRotator_spInsertSlide'))
DROP PROCEDURE {databaseOwner}{objectQualifier}EngageRotator_spInsertSlide
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EngageRotator_spInsertSlide
	@content ntext, 
	@linkUrl nvarchar(255), 
	@startDate datetime, 
	@endDate datetime, 
	@moduleId int, 
	@title nvarchar(255), 
	@imageUrl nvarchar(255), 
	@pagerImageUrl nvarchar(255), 
	@sortOrder int
AS
BEGIN
	INSERT INTO {databaseOwner}{objectQualifier}EngageRotator_Slide([Content], LinkUrl, StartDate, EndDate, ModuleId, Title, ImageUrl, PagerImageUrl, SortOrder)
	VALUES (@content, @linkUrl, @startDate, @endDate, @moduleId, @title, @imageUrl, @pagerImageUrl, @sortOrder)
	
	SELECT SCOPE_IDENTITY()
END
GO

IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}{objectQualifier}EngageRotator_spUpdateContentItem'))
DROP PROCEDURE {databaseOwner}{objectQualifier}EngageRotator_spUpdateContentItem
GO

IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}{objectQualifier}EngageRotator_spUpdateSlide'))
DROP PROCEDURE {databaseOwner}{objectQualifier}EngageRotator_spUpdateSlide
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EngageRotator_spUpdateSlide
	@slideId int,
	@content ntext, 
	@linkUrl nvarchar(255), 
	@startDate datetime, 
	@endDate datetime, 
	@title nvarchar(255), 
	@imageUrl nvarchar(255), 
	@pagerImageUrl nvarchar(255), 
	@sortOrder int
AS
BEGIN
	UPDATE {databaseOwner}{objectQualifier}EngageRotator_Slide
	SET [Content] = @content, 
	LinkUrl = @linkUrl, 
	StartDate = @startDate, 
	EndDate = @endDate, 
	Title = @title, 
	ImageUrl = @imageUrl, 
	PagerImageUrl = @pagerImageUrl, 
	SortOrder = @sortOrder
	WHERE SlideId = @slideId
END
GO

IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}{objectQualifier}EngageRotator_spDeleteContentItem'))
DROP PROCEDURE {databaseOwner}{objectQualifier}EngageRotator_spDeleteContentItem
GO

IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}{objectQualifier}EngageRotator_spDeleteSlide'))
DROP PROCEDURE {databaseOwner}{objectQualifier}EngageRotator_spDeleteSlide
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EngageRotator_spDeleteSlide
	@slideId int
AS
BEGIN
	DELETE {databaseOwner}{objectQualifier}EngageRotator_Slide
	WHERE SlideId = @slideId
END
GO

IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}{objectQualifier}EngageRotator_spGetContentItem'))
DROP PROCEDURE {databaseOwner}{objectQualifier}EngageRotator_spGetContentItem
GO

IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}{objectQualifier}EngageRotator_spGetSlide'))
DROP PROCEDURE {databaseOwner}{objectQualifier}EngageRotator_spGetSlide
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EngageRotator_spGetSlide
	@slideId int
AS
BEGIN
	SELECT SlideId, [Content], ImageUrl, LinkUrl, StartDate, EndDate, Title, PagerImageUrl, SortOrder
	FROM {databaseOwner}{objectQualifier}EngageRotator_Slide
	WHERE SlideId = @slideId
END
GO

IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}{objectQualifier}EngageRotator_spGetContentItems'))
DROP PROCEDURE {databaseOwner}{objectQualifier}EngageRotator_spGetContentItems
GO

IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}{objectQualifier}EngageRotator_spGetSlides'))
DROP PROCEDURE {databaseOwner}{objectQualifier}EngageRotator_spGetSlides
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EngageRotator_spGetSlides
	@moduleId int,
	@getOutdatedSlides bit
AS
BEGIN
	SELECT SlideId, [Content], ImageUrl, LinkUrl, StartDate, EndDate, Title, PagerImageUrl, SortOrder
	FROM {databaseOwner}{objectQualifier}EngageRotator_Slide
	WHERE ModuleId = @moduleId
	AND (@getOutdatedSlides = 1 OR (StartDate < GETDATE() and (EndDate IS NULL OR EndDate > GETDATE())))
	ORDER BY SortOrder, StartDate, Title
END
GO
