<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CancelButton.Text" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="SubmitButton.Text" xml:space="preserve">
    <value>Submit</value>
  </data>
  <data name="CalendarCloseText.Text" xml:space="preserve">
    <value>Clode</value>
  </data>
  <data name="CalendarCurrentText.Text" xml:space="preserve">
    <value>Today</value>
  </data>
  <data name="CalendarNextText.Text" xml:space="preserve">
    <value>Next&amp;#x3e;</value>
  </data>
  <data name="CalendarPrevText.Text" xml:space="preserve">
    <value>&amp;#x3c;Prev</value>
  </data>
  <data name="ContentLabel.Help" xml:space="preserve">
    <value>The main content for this slide.</value>
  </data>
  <data name="ContentLabel.Text" xml:space="preserve">
    <value>Content: </value>
  </data>
  <data name="EndDateLabel.Help" xml:space="preserve">
    <value>The date (and time) after which this slide will stop appearing in the rotator.  If no time is supplied, it defaults to midnight.  You can leave this field blank to display the slide indefinitely.</value>
  </data>
  <data name="EndDateLabel.Text" xml:space="preserve">
    <value>End Date:</value>
  </data>
  <data name="LinkUrlLabel.Help" xml:space="preserve">
    <value>The URL that this slide's links should point to.  You can choose a page within this website, or a URL pointing to an external resource, or no URL at all if you leave the URL field blank or "http://," or choose None.</value>
  </data>
  <data name="LinkUrlLabel.Text" xml:space="preserve">
    <value>Link URL: </value>
  </data>
  <data name="PagerImageUrlLabel.Help" xml:space="preserve">
    <value>The image (typically a smaller version of the main image) which can be displayed in a pager.  You can choose a file that exists on this website, or an external image, or no image at all if you leave the URL field blank or "http://," or choose None.</value>
  </data>
  <data name="PagerImageUrlLabel.Text" xml:space="preserve">
    <value>Pager Image URL: </value>
  </data>
  <data name="SortOrderLabel.Help" xml:space="preserve">
    <value>Use Sort Order to determine the order in which slides are shown.  Slides are sorted first by sort order, then by their start date, and lastly (if the other two are the same), by their title.</value>
  </data>
  <data name="SortOrderLabel.Text" xml:space="preserve">
    <value>Sort Order</value>
  </data>
  <data name="StartDateLabel.Help" xml:space="preserve">
    <value>The date (and time) that this slide will start appearing in the rotator.  If no time is supplied, it defaults to midnight.</value>
  </data>
  <data name="StartDateLabel.Text" xml:space="preserve">
    <value>Start Date:</value>
  </data>
  <data name="ImageUrlLabel.Help" xml:space="preserve">
    <value>The URL pointing to the main image for this slide. You can choose a file that exists on this website, or an external image, or no image at all if you leave the URL field blank or "http://," or choose None.</value>
  </data>
  <data name="ImageUrlLabel.Text" xml:space="preserve">
    <value>Image URL:</value>
  </data>
  <data name="TitleLabel.Help" xml:space="preserve">
    <value>The title of this slide</value>
  </data>
  <data name="TitleLabel.Text" xml:space="preserve">
    <value>Title: </value>
  </data>
  <data name="SortOrderRequiredValidator.Text" xml:space="preserve">
    <value>Sort Order is required</value>
  </data>
  <data name="StartDateRequiredValidator.Text" xml:space="preserve">
    <value>Start Date is required</value>
  </data>
  <data name="EndDateTypeValidator.Text" xml:space="preserve">
    <value>End Date is an invalid date</value>
  </data>
  <data name="SortOrderTypeValidator.Text" xml:space="preserve">
    <value>Sort Order must be an integer value</value>
  </data>
  <data name="StartDateTypeValidator.Text" xml:space="preserve">
    <value>Start Date is an invalid date</value>
  </data>
  <data name="StartEndDateCompareValidator.Text" xml:space="preserve">
    <value>Start Date must occur before End Date</value>
  </data>
  <data name="ControlTitle_edit.Text" xml:space="preserve">
    <value>Add/Edit Slides</value>
  </data>
</root>